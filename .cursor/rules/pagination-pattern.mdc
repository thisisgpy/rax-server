---
description: pagination, search, list
globs: 
alwaysApply: false
---
# Pagination, Search and List Patterns

## DTO Structure
For list/search operations, DTOs should follow these patterns:

### Query DTOs
```typescript
export class QueryDto {
    @ApiProperty({
        description: '页码',
        type: Number,
        default: 1
    })
    @IsOptional()
    @IsInt()
    @Min(1)
    page?: number = 1;

    @ApiProperty({
        description: '每页条数',
        type: Number,
        default: 10
    })
    @IsOptional()
    @IsInt()
    @Min(1)
    @Max(100)
    pageSize?: number = 10;

    @ApiProperty({
        description: '搜索关键字',
        type: String,
        required: false
    })
    @IsOptional()
    @IsString()
    keyword?: string;
}
```

### Response DTOs
```typescript
export class ListResponseDto<T> {
    @ApiProperty({
        description: '总记录数'
    })
    total: number;

    @ApiProperty({
        description: '当前页数据',
        isArray: true
    })
    records: T[];
}
```

## Service Implementation
Services should implement pagination using TypeORM's built-in pagination:

```typescript
async findPage(queryDto: QueryDto): Promise<ListResponseDto<Entity>> {
    const [records, total] = await this.repository
        .createQueryBuilder('alias')
        .skip((queryDto.page - 1) * queryDto.pageSize)
        .take(queryDto.pageSize)
        .getManyAndCount();

    return { records, total };
}
```

## Controller Implementation
Controllers should use proper Swagger documentation for pagination endpoints:

```typescript
@ApiOperation({
    summary: '分页查询',
    description: '分页查询列表数据'
})
@ApiResponse({
    status: 200,
    description: '查询成功',
    type: ListResponseDto
})
@Get('list')
async findPage(@Query() queryDto: QueryDto): Promise<ListResponseDto<Entity>> {
    return this.service.findPage(queryDto);
}
```
